/*
 * generated by Xtext 2.24.0
 */
grammar InternalWatchlist;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.watchlist.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.watchlist.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.watchlist.services.WatchlistGrammarAccess;

}

@parser::members {

 	private WatchlistGrammarAccess grammarAccess;

    public InternalWatchlistParser(TokenStream input, WatchlistGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected WatchlistGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getActionActionParserRuleCall_0());
			}
			lv_action_0_0=ruleAction
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"action",
					lv_action_0_0,
					"org.xtext.example.watchlist.Watchlist.Action");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getActionAccess().getAddMovieParserRuleCall_0());
		}
		this_addMovie_0=ruleaddMovie
		{
			$current = $this_addMovie_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getRemoveMovieParserRuleCall_1());
		}
		this_removeMovie_1=ruleremoveMovie
		{
			$current = $this_removeMovie_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleaddMovie
entryRuleaddMovie returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddMovieRule()); }
	iv_ruleaddMovie=ruleaddMovie
	{ $current=$iv_ruleaddMovie.current; }
	EOF;

// Rule addMovie
ruleaddMovie returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='add'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddMovieAccess().getAddKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getAddMovieAccess().getMovieParserRuleCall_1());
		}
		this_movie_1=rulemovie
		{
			$current = $this_movie_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleremoveMovie
entryRuleremoveMovie returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRemoveMovieRule()); }
	iv_ruleremoveMovie=ruleremoveMovie
	{ $current=$iv_ruleremoveMovie.current; }
	EOF;

// Rule removeMovie
ruleremoveMovie returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='remove'
		{
			newLeafNode(otherlv_0, grammarAccess.getRemoveMovieAccess().getRemoveKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getRemoveMovieAccess().getMovieParserRuleCall_1());
		}
		this_movie_1=rulemovie
		{
			$current = $this_movie_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulemovie
entryRulemovie returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMovieRule()); }
	iv_rulemovie=rulemovie
	{ $current=$iv_rulemovie.current; }
	EOF;

// Rule movie
rulemovie returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getMovieAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getMovieRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
