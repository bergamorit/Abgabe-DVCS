/*
 * generated by Xtext 2.24.0
 */
grammar InternalWatchlist;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.watchlist.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.watchlist.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.watchlist.services.WatchlistGrammarAccess;

}
@parser::members {
	private WatchlistGrammarAccess grammarAccess;

	public void setGrammarAccess(WatchlistGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getActionAssignment()); }
		(rule__Model__ActionAssignment)*
		{ after(grammarAccess.getModelAccess().getActionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getAlternatives()); }
		(rule__Action__Alternatives)
		{ after(grammarAccess.getActionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleaddMovie
entryRuleaddMovie
:
{ before(grammarAccess.getAddMovieRule()); }
	 ruleaddMovie
{ after(grammarAccess.getAddMovieRule()); } 
	 EOF 
;

// Rule addMovie
ruleaddMovie 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddMovieAccess().getGroup()); }
		(rule__AddMovie__Group__0)
		{ after(grammarAccess.getAddMovieAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleremoveMovie
entryRuleremoveMovie
:
{ before(grammarAccess.getRemoveMovieRule()); }
	 ruleremoveMovie
{ after(grammarAccess.getRemoveMovieRule()); } 
	 EOF 
;

// Rule removeMovie
ruleremoveMovie 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRemoveMovieAccess().getGroup()); }
		(rule__RemoveMovie__Group__0)
		{ after(grammarAccess.getRemoveMovieAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulemovie
entryRulemovie
:
{ before(grammarAccess.getMovieRule()); }
	 rulemovie
{ after(grammarAccess.getMovieRule()); } 
	 EOF 
;

// Rule movie
rulemovie 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMovieAccess().getNameAssignment()); }
		(rule__Movie__NameAssignment)
		{ after(grammarAccess.getMovieAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getAddMovieParserRuleCall_0()); }
		ruleaddMovie
		{ after(grammarAccess.getActionAccess().getAddMovieParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getRemoveMovieParserRuleCall_1()); }
		ruleremoveMovie
		{ after(grammarAccess.getActionAccess().getRemoveMovieParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddMovie__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddMovie__Group__0__Impl
	rule__AddMovie__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddMovie__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddMovieAccess().getAddKeyword_0()); }
	'add'
	{ after(grammarAccess.getAddMovieAccess().getAddKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddMovie__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddMovie__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddMovie__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddMovieAccess().getMovieParserRuleCall_1()); }
	rulemovie
	{ after(grammarAccess.getAddMovieAccess().getMovieParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RemoveMovie__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RemoveMovie__Group__0__Impl
	rule__RemoveMovie__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveMovie__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveMovieAccess().getRemoveKeyword_0()); }
	'remove'
	{ after(grammarAccess.getRemoveMovieAccess().getRemoveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveMovie__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RemoveMovie__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveMovie__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRemoveMovieAccess().getMovieParserRuleCall_1()); }
	rulemovie
	{ after(grammarAccess.getRemoveMovieAccess().getMovieParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ActionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getActionActionParserRuleCall_0()); }
		ruleAction
		{ after(grammarAccess.getModelAccess().getActionActionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Movie__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMovieAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getMovieAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
